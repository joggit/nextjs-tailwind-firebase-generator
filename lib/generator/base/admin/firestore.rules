// Firebase Security Rules Template - Generated by Website Generator
// File: firestore.rules (will be generated in new projects)

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== PRODUCTS ====================
    // Products are read-only for all users, write-only for admins
    match /products/{productId} {
      allow read: if true; // Anyone can read products
      allow write: if isAdmin(); // Only admins can write products
      
      // Allow increment of view count
      allow update: if isValidViewIncrement();
    }
    
    // ==================== CATEGORIES ====================
    match /categories/{categoryId} {
      allow read: if true; // Anyone can read categories
      allow write: if isAdmin(); // Only admins can write categories
    }
    
    // ==================== ORDERS ====================
    match /orders/{orderId} {
      // Users can read their own orders, admins can read all
      allow read: if isOwner(resource.data.customer.email) || isAdmin();
      
      // Users can create orders, admins can update
      allow create: if isValidOrderCreation();
      allow update: if isAdmin() || isValidOrderUpdate();
      
      // Only admins can delete orders
      allow delete: if isAdmin();
    }
    
    // ==================== CUSTOMERS ====================
    match /customers/{customerId} {
      // Users can read/write their own customer data, admins can access all
      allow read, write: if isOwner(resource.data.email) || isAdmin();
      allow create: if isValidCustomerCreation();
    }
    
    // ==================== REVIEWS ====================
    match /reviews/{reviewId} {
      // Anyone can read approved reviews
      allow read: if resource.data.approved == true;
      
      // Users can create reviews, but they start as unapproved
      allow create: if isValidReviewCreation();
      
      // Users can update their own reviews (before approval), admins can update any
      allow update: if (isOwner(resource.data.customerEmail) && resource.data.approved == false) || isAdmin();
      
      // Only admins can delete reviews
      allow delete: if isAdmin();
    }
    
    // ==================== INVENTORY ====================
    match /inventory/{inventoryId} {
      // Only admins can access inventory
      allow read, write: if isAdmin();
    }
    
    // ==================== COUPONS ====================
    match /coupons/{couponId} {
      // Anyone can read active coupons
      allow read: if resource.data.active == true && resource.data.expiryDate > request.time;
      
      // Only admins can manage coupons
      allow write: if isAdmin();
    }
    
    // ==================== HELPER FUNCTIONS ====================
    
    // Check if user is an admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.email in [
               'admin@${businessName.toLowerCase().replace(/\s+/g, '')}.com',
               'support@${businessName.toLowerCase().replace(/\s+/g, '')}.com'
             ];
    }
    
    // Check if user owns the resource by email
    function isOwner(email) {
      return request.auth != null && request.auth.token.email == email;
    }
    
    // Validate view increment for products
    function isValidViewIncrement() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'updatedAt']) &&
             request.resource.data.views == resource.data.views + 1;
    }
    
    // Validate order creation
    function isValidOrderCreation() {
      let data = request.resource.data;
      return request.auth != null &&
             data.keys().hasAll(['customer', 'items', 'pricing', 'status', 'createdAt']) &&
             data.status == 'pending' &&
             data.customer.email == request.auth.token.email &&
             data.items is list &&
             data.items.size() > 0 &&
             data.pricing.total is number &&
             data.pricing.total > 0;
    }
    
    // Validate order updates (only status changes allowed for non-admins)
    function isValidOrderUpdate() {
      return isOwner(resource.data.customer.email) &&
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']) &&
             request.resource.data.status in ['cancelled'];
    }
    
    // Validate customer creation
    function isValidCustomerCreation() {
      let data = request.resource.data;
      return request.auth != null &&
             data.email == request.auth.token.email &&
             data.keys().hasAll(['firstName', 'lastName', 'email']) &&
             data.firstName is string &&
             data.lastName is string &&
             data.email is string;
    }
    
    // Validate review creation
    function isValidReviewCreation() {
      let data = request.resource.data;
      return request.auth != null &&
             data.customerEmail == request.auth.token.email &&
             data.keys().hasAll(['productId', 'customerEmail', 'customerName', 'rating', 'content']) &&
             data.rating is number &&
             data.rating >= 1 &&
             data.rating <= 5 &&
             data.content is string &&
             data.content.size() > 0 &&
             data.approved == false; // Reviews start as unapproved
    }
  }
}