// Updated Header Template with Pages Menu
// File: lib/generator/templates/base/components/Header.js.template

'use client'

import { useState, useRef, useEffect } from 'react'
import Link from 'next/link'
import { Menu, X, ChevronDown } from 'lucide-react'

export default function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [activeDropdown, setActiveDropdown] = useState(null)
  const dropdownRefs = useRef({})

  // Navigation items generated from config.pages
  const navigationItems = [
    {{menuItems}}
  ]

  const toggleMenu = () => setIsMenuOpen(!isMenuOpen)
  
  const toggleDropdown = (itemName) => {
    setActiveDropdown(activeDropdown === itemName ? null : itemName)
  }

  const closeDropdown = () => {
    setActiveDropdown(null)
  }

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (activeDropdown && dropdownRefs.current[activeDropdown] && 
          !dropdownRefs.current[activeDropdown].contains(event.target)) {
        closeDropdown()
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [activeDropdown])

  // Logo component
  const renderLogo = () => {
    const logoType = '{{header.logoType}}'
    const logoImage = '{{header.logoImage}}'
    const logoText = '{{header.logoText}}'
    
    if (logoType === 'image' && logoImage) {
      return (
        <img 
          src={logoImage} 
          alt={logoText}
          className="h-8 w-auto"
        />
      )
    }
    
    return (
      <span className="text-xl font-bold text-gray-900">
        {logoText}
      </span>
    )
  }

  // Render desktop menu item
  const renderDesktopMenuItem = (item) => {
    if (item.children && item.children.length > 0) {
      return (
        <div
          key={item.name}
          className="relative"
          ref={(el) => dropdownRefs.current[item.name] = el}
        >
          <button
            onClick={() => toggleDropdown(item.name)}
            className={`flex items-center space-x-1 px-3 py-2 text-gray-600 hover:text-blue-600 transition-colors font-medium ${
              activeDropdown === item.name ? 'text-blue-600' : ''
            }`}
          >
            <span>{item.name}</span>
            <ChevronDown 
              className={`w-4 h-4 transition-transform ${
                activeDropdown === item.name ? 'rotate-180' : ''
              }`} 
            />
          </button>
          
          {/* Desktop Dropdown */}
          {activeDropdown === item.name && (
            <div className="absolute top-full left-0 mt-1 w-64 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
              {item.children.map((child, index) => (
                <Link
                  key={index}
                  href={child.href}
                  onClick={() => closeDropdown()}
                  className="block px-4 py-3 text-gray-600 hover:text-blue-600 hover:bg-gray-50 transition-colors border-b border-gray-100 last:border-b-0"
                >
                  <div className="font-medium">{child.name}</div>
                  {child.description && (
                    <div className="text-xs text-gray-500 mt-1">{child.description}</div>
                  )}
                </Link>
              ))}
            </div>
          )}
        </div>
      )
    }

    return (
      <Link
        key={item.name}
        href={item.href}
        className="px-3 py-2 text-gray-600 hover:text-blue-600 transition-colors font-medium relative group"
      >
        {item.name}
        <span className="absolute inset-x-0 bottom-0 h-0.5 bg-blue-600 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-200"></span>
      </Link>
    )
  }

  // Render mobile menu item
  const renderMobileMenuItem = (item) => {
    if (item.children && item.children.length > 0) {
      return (
        <div key={item.name} className="w-full">
          <button
            onClick={() => toggleDropdown(item.name)}
            className="flex items-center justify-between w-full px-3 py-2 text-gray-600 hover:text-blue-600 transition-colors font-medium text-left"
          >
            <span>{item.name}</span>
            <ChevronDown 
              className={`w-4 h-4 transition-transform ${
                activeDropdown === item.name ? 'rotate-180' : ''
              }`} 
            />
          </button>
          
          {/* Mobile Dropdown */}
          {activeDropdown === item.name && (
            <div className="mt-2 ml-4 space-y-2">
              {item.children.map((child, index) => (
                <Link
                  key={index}
                  href={child.href}
                  onClick={() => {
                    closeDropdown()
                    setIsMenuOpen(false)
                  }}
                  className="block px-3 py-2 text-sm text-gray-600 hover:text-blue-600 hover:bg-gray-50 transition-colors rounded-lg"
                >
                  {child.name}
                </Link>
              ))}
            </div>
          )}
        </div>
      )
    }

    return (
      <Link
        key={item.name}
        href={item.href}
        onClick={() => setIsMenuOpen(false)}
        className="block w-full text-left px-3 py-2 text-gray-600 hover:text-blue-600 transition-colors font-medium"
      >
        {item.name}
      </Link>
    )
  }

  // Header style classes based on configuration
  const getHeaderClasses = () => {
    const headerStyle = '{{header.style}}'
    const baseClasses = 'sticky top-0 z-50 border-b border-gray-100'
    
    switch (headerStyle) {
      case 'transparent':
        return `${baseClasses} bg-transparent absolute top-0 left-0 right-0`
      case 'solid':
        return `${baseClasses} bg-white shadow-sm`
      case 'blur':
        return `${baseClasses} bg-white/95 backdrop-blur-sm`
      case 'gradient':
        return `${baseClasses} bg-gradient-to-r from-blue-600 to-purple-600 text-white`
      default:
        return `${baseClasses} bg-white shadow-sm`
    }
  }

  const showCta = {{header.showCta}}
  const ctaText = '{{header.ctaText}}'
  const ctaLink = '{{header.ctaLink}}'

  return (
    <header className={getHeaderClasses()}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          
          {/* Logo */}
          <Link href="/" className="flex items-center space-x-3">
            {renderLogo()}
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex items-center space-x-1">
            {navigationItems.map((item) => renderDesktopMenuItem(item))}
          </nav>

          {/* Desktop CTA and Mobile Menu Button */}
          <div className="flex items-center space-x-4">
            {/* Desktop CTA */}
            {showCta && (
              <Link
                href={ctaLink}
                className="hidden md:inline-flex bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium"
              >
                {ctaText}
              </Link>
            )}
            
            {/* Mobile Menu Button */}
            <button
              onClick={toggleMenu}
              className="md:hidden p-2 rounded-lg hover:bg-gray-100 transition-colors"
              aria-label="Toggle menu"
            >
              {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
            </button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden bg-white border-t border-gray-100 py-4">
            <div className="space-y-2">
              {navigationItems.map((item) => renderMobileMenuItem(item))}
              
              {/* Mobile CTA */}
              {showCta && (
                <div className="pt-4 border-t border-gray-100 mt-4">
                  <Link
                    href={ctaLink}
                    onClick={() => setIsMenuOpen(false)}
                    className="block w-full text-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
                  >
                    {ctaText}
                  </Link>
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Overlay for dropdown menus on desktop */}
      {activeDropdown && (
        <div 
          className="hidden md:block fixed inset-0 z-40" 
          onClick={closeDropdown}
        />
      )}
    </header>
  )
}