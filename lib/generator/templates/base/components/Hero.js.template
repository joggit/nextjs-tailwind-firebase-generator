// lib/generator/templates/base/components/Hero.js.template
'use client'

import { ArrowRight } from 'lucide-react'
import Image from 'next/image'

export default function Hero() {
  const heroType = '{{heroType}}'
  const headline = '{{heroHeadline}}'
  const description = '{{heroDescription}}'
  const ctaPrimary = '{{heroCTAPrimary}}'
  const ctaPrimaryHref = '{{heroCTAPrimaryHref}}'
  const ctaSecondary = '{{heroCTASecondary}}'
  const ctaSecondaryHref = '{{heroCTASecondaryHref}}'
  const heroImage = '{{heroImage}}'
  const backgroundImage = '{{heroBackgroundImage}}'

  const renderCenteredHero = () => (
    <div className="text-center">
      <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6 leading-tight">
        {headline}
      </h1>
      <p className="text-xl md:text-2xl text-gray-600 mb-8 max-w-3xl mx-auto leading-relaxed">
        {description}
      </p>
      <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
        <a
          href={ctaPrimaryHref}
          className="inline-flex items-center px-8 py-4 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-colors shadow-lg hover:shadow-xl"
        >
          {ctaPrimary}
          <ArrowRight className="ml-2 w-5 h-5" />
        </a>
        <a
          href={ctaSecondaryHref}
          className="inline-flex items-center px-8 py-4 border border-gray-300 text-gray-700 rounded-lg font-semibold hover:bg-gray-50 transition-colors"
        >
          {ctaSecondary}
        </a>
      </div>
    </div>
  )

  const renderSplitHero = () => (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
      <div>
        <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight">
          {headline}
        </h1>
        <p className="text-lg text-gray-600 mb-8 leading-relaxed">
          {description}
        </p>
        <div className="flex flex-col sm:flex-row gap-4">
          <a
            href={ctaPrimaryHref}
            className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-colors"
          >
            {ctaPrimary}
            <ArrowRight className="ml-2 w-5 h-5" />
          </a>
          <a
            href={ctaSecondaryHref}
            className="inline-flex items-center px-6 py-3 border border-gray-300 text-gray-700 rounded-lg font-semibold hover:bg-gray-50 transition-colors"
          >
            {ctaSecondary}
          </a>
        </div>
      </div>
      <div className="relative">
        {heroImage && heroImage !== '/placeholder.svg' ? (
          <div className="relative w-full h-96 rounded-lg overflow-hidden shadow-xl">
            <Image
              src={heroImage}
              alt="Hero"
              fill
              className="object-cover"
              priority
            />
          </div>
        ) : (
          <div className="w-full h-96 bg-gradient-to-br from-blue-100 to-purple-100 rounded-lg flex items-center justify-center">
            <span className="text-gray-500">Hero Image</span>
          </div>
        )}
      </div>
    </div>
  )

  const renderFullscreenHero = () => (
    <div className="relative min-h-screen flex items-center justify-center text-center text-white">
      {/* Background Image */}
      {backgroundImage && backgroundImage !== '/background.jpg' && (
        <div className="absolute inset-0">
          <Image
            src={backgroundImage}
            alt="Background"
            fill
            className="object-cover"
            priority
          />
          <div className="absolute inset-0 bg-black bg-opacity-50"></div>
        </div>
      )}
      
      <div className="relative z-10 max-w-4xl mx-auto">
        <h1 className="text-5xl md:text-7xl font-bold mb-6 leading-tight">
          {headline}
        </h1>
        <p className="text-xl md:text-2xl mb-8 leading-relaxed opacity-90">
          {description}
        </p>
        <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
          <a
            href={ctaPrimaryHref}
            className="inline-flex items-center px-8 py-4 bg-white text-gray-900 rounded-lg font-semibold hover:bg-gray-100 transition-colors shadow-lg"
          >
            {ctaPrimary}
            <ArrowRight className="ml-2 w-5 h-5" />
          </a>
          <a
            href={ctaSecondaryHref}
            className="inline-flex items-center px-8 py-4 border-2 border-white text-white rounded-lg font-semibold hover:bg-white hover:text-gray-900 transition-colors"
          >
            {ctaSecondary}
          </a>
        </div>
      </div>
    </div>
  )

  const renderMinimalHero = () => (
    <div className="max-w-3xl">
      <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
        {headline}
      </h1>
      <p className="text-lg text-gray-600 mb-6 leading-relaxed">
        {description}
      </p>
      <div className="flex gap-4">
        <a
          href={ctaPrimaryHref}
          className="inline-flex items-center px-6 py-3 bg-gray-900 text-white rounded font-medium hover:bg-gray-800 transition-colors"
        >
          {ctaPrimary}
        </a>
        <a
          href={ctaSecondaryHref}
          className="inline-flex items-center px-6 py-3 text-gray-700 font-medium hover:text-gray-900 transition-colors"
        >
          {ctaSecondary}
        </a>
      </div>
    </div>
  )

  const getHeroStyle = () => {
    switch (heroType) {
      case 'split':
        return renderSplitHero()
      case 'fullscreen':
        return renderFullscreenHero()
      case 'minimal':
        return renderMinimalHero()
      case 'video':
        // For video background, fall back to fullscreen with background
        return renderFullscreenHero()
      case 'animated':
        // For animated, use centered with extra animations
        return renderCenteredHero()
      default:
        return renderCenteredHero()
    }
  }

  // Don't render container for fullscreen hero
  if (heroType === 'fullscreen' || heroType === 'video') {
    return (
      <section className="relative overflow-hidden">
        {getHeroStyle()}
      </section>
    )
  }

  return (
    <section className="relative py-20 px-4 overflow-hidden bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Background Pattern */}
      <div className="absolute inset-0 opacity-40">
        <div className="absolute top-20 left-20 w-72 h-72 bg-blue-300 rounded-full mix-blend-multiply filter blur-xl animate-pulse"></div>
        <div className="absolute top-20 right-20 w-72 h-72 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl animate-pulse delay-1000"></div>
        <div className="absolute bottom-20 left-40 w-72 h-72 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl animate-pulse delay-2000"></div>
      </div>

      <div className="relative max-w-7xl mx-auto">
        {getHeroStyle()}
      </div>
    </section>
  )
}