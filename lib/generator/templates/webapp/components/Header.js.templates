// Web App Header Template
// File: lib/generator/templates/webapp/components/Header.js.template

'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { 
  Menu, 
  X, 
  Search, 
  Bell, 
  Settings, 
  User, 
  LogOut, 
  ChevronDown,
  Home,
  BarChart3,
  Users,
  FileText,
  Calendar,
  Mail,
  HelpCircle,
  Sun,
  Moon,
  Sidebar,
  Maximize2,
  Minimize2
} from 'lucide-react'

export default function Header({ 
  user,
  onToggleSidebar,
  onToggleFullscreen,
  onLogout,
  isFullscreen = false,
  sidebarCollapsed = false,
  notifications = [],
  onNotificationClick,
  onSearchSubmit,
  darkMode = false,
  onToggleDarkMode
}) {
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false)
  const [isNotificationMenuOpen, setIsNotificationMenuOpen] = useState(false)
  const [isSearchFocused, setIsSearchFocused] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [isCommandPaletteOpen, setIsCommandPaletteOpen] = useState(false)

  // App configuration from template processing
  const appName = "{{businessName}}"
  const appLogo = "{{logoImage}}"
  const logoType = "{{logoType}}"
  const logoText = "{{logoText}}"
  const showSearch = {{showSearch}}
  const showNotifications = {{showNotifications}}
  const showUserMenu = {{showUserMenu}}
  const showDarkModeToggle = {{showDarkModeToggle}}
  const showFullscreenToggle = {{showFullscreenToggle}}
  const environment = "{{environment}}"

  // Navigation items for web app - processed from config
  const navigationItems = [
    {{menuItems}}
  ]

  // Fallback navigation items for web app
  const fallbackItems = [
    { name: 'Dashboard', href: '/dashboard', icon: 'Home', type: 'link' },
    { name: 'Analytics', href: '/analytics', icon: 'BarChart3', type: 'link' },
    { name: 'Users', href: '/users', icon: 'Users', type: 'link' },
    { name: 'Documents', href: '/documents', icon: 'FileText', type: 'link' },
    { name: 'Calendar', href: '/calendar', icon: 'Calendar', type: 'link' },
    { name: 'Settings', href: '/settings', icon: 'Settings', type: 'link' }
  ]

  // Use processed items if available, otherwise use fallback
  const menuItems = navigationItems.length > 0 ? navigationItems : fallbackItems

  // Icon mapping for menu items
  const iconMap = {
    Home, BarChart3, Users, FileText, Calendar, Settings, Mail, HelpCircle
  }

  // Handle search
  const handleSearch = (e) => {
    e.preventDefault()
    if (searchTerm.trim()) {
      onSearchSubmit?.(searchTerm.trim())
      setSearchTerm('')
      setIsSearchFocused(false)
    }
  }

  // Handle user menu toggle
  const handleUserMenuToggle = () => {
    setIsUserMenuOpen(!isUserMenuOpen)
    setIsNotificationMenuOpen(false)
  }

  // Handle notification menu toggle
  const handleNotificationToggle = () => {
    setIsNotificationMenuOpen(!isNotificationMenuOpen)
    setIsUserMenuOpen(false)
  }

  // Handle keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (event) => {
      // Command/Ctrl + K for search
      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
        event.preventDefault()
        setIsCommandPaletteOpen(true)
      }
      // Escape to close menus
      if (event.key === 'Escape') {
        setIsUserMenuOpen(false)
        setIsNotificationMenuOpen(false)
        setIsCommandPaletteOpen(false)
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [])

  // Close menus when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (isUserMenuOpen && !event.target.closest('.user-menu-container')) {
        setIsUserMenuOpen(false)
      }
      if (isNotificationMenuOpen && !event.target.closest('.notification-menu-container')) {
        setIsNotificationMenuOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [isUserMenuOpen, isNotificationMenuOpen])

  // Get user initials for avatar
  const getUserInitials = (user) => {
    if (!user?.name) return 'U'
    return user.name.split(' ').map(name => name[0]).join('').toUpperCase()
  }

  // Get notification count
  const unreadNotifications = notifications.filter(n => !n.read).length

  return (
    <header className={`sticky top-0 z-50 border-b transition-colors ${
      darkMode 
        ? 'bg-gray-900 border-gray-700' 
        : 'bg-white border-gray-200'
    }`}>
      <div className="flex items-center justify-between h-16 px-4">
        
        {/* Left Section - Logo & Navigation */}
        <div className="flex items-center space-x-4">
          {/* Sidebar Toggle */}
          <button
            onClick={onToggleSidebar}
            className={`p-2 rounded-lg transition-colors ${
              darkMode 
                ? 'hover:bg-gray-800 text-gray-400 hover:text-white' 
                : 'hover:bg-gray-100 text-gray-600 hover:text-gray-900'
            }`}
            title="Toggle Sidebar"
          >
            <Sidebar className="w-5 h-5" />
          </button>

          {/* Logo */}
          <Link href="/dashboard" className="flex items-center space-x-3 flex-shrink-0">
            {logoType === "image" && appLogo ? (
              <img 
                src={appLogo} 
                alt={appName}
                className="h-8 w-auto"
              />
            ) : (
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center shadow-lg">
                  <span className="text-white font-bold text-sm">
                    {(logoText || appName).charAt(0).toUpperCase()}
                  </span>
                </div>
                <span className={`text-xl font-bold tracking-tight ${
                  darkMode ? 'text-white' : 'text-gray-900'
                }`}>
                  {logoText || appName}
                </span>
                {environment && environment !== 'production' && (
                  <span className="px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full font-medium">
                    {environment}
                  </span>
                )}
              </div>
            )}
          </Link>

          {/* Breadcrumbs/Current Page - Hidden on small screens */}
          <div className="hidden lg:flex items-center space-x-2">
            <span className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              /
            </span>
            <span className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
              Dashboard
            </span>
          </div>
        </div>

        {/* Center Section - Search */}
        {showSearch && (
          <div className="flex-1 max-w-2xl mx-8 hidden md:block">
            <form onSubmit={handleSearch} className="relative">
              <div className={`relative transition-all duration-200 ${
                isSearchFocused ? 'ring-2 ring-blue-500 ring-opacity-50' : ''
              }`}>
                <Search className={`absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 ${
                  darkMode ? 'text-gray-400' : 'text-gray-400'
                }`} />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  onFocus={() => setIsSearchFocused(true)}
                  onBlur={() => setIsSearchFocused(false)}
                  placeholder="Search... (âŒ˜K)"
                  className={`w-full pl-10 pr-4 py-2 text-sm rounded-lg border transition-colors ${
                    darkMode 
                      ? 'bg-gray-800 border-gray-700 text-white placeholder-gray-400 focus:border-blue-500' 
                      : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500'
                  } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50`}
                />
              </div>
            </form>
          </div>
        )}

        {/* Right Section - Actions & User Menu */}
        <div className="flex items-center space-x-2">
          {/* Mobile Search */}
          {showSearch && (
            <button
              onClick={() => setIsCommandPaletteOpen(true)}
              className={`md:hidden p-2 rounded-lg transition-colors ${
                darkMode 
                  ? 'hover:bg-gray-800 text-gray-400 hover:text-white' 
                  : 'hover:bg-gray-100 text-gray-600 hover:text-gray-900'
              }`}
              title="Search"
            >
              <Search className="w-5 h-5" />
            </button>
          )}

          {/* Dark Mode Toggle */}
          {showDarkModeToggle && (
            <button
              onClick={onToggleDarkMode}
              className={`p-2 rounded-lg transition-colors ${
                darkMode 
                  ? 'hover:bg-gray-800 text-gray-400 hover:text-white' 
                  : 'hover:bg-gray-100 text-gray-600 hover:text-gray-900'
              }`}
              title="Toggle Dark Mode"
            >
              {darkMode ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
            </button>
          )}

          {/* Fullscreen Toggle */}
          {showFullscreenToggle && (
            <button
              onClick={onToggleFullscreen}
              className={`p-2 rounded-lg transition-colors ${
                darkMode 
                  ? 'hover:bg-gray-800 text-gray-400 hover:text-white' 
                  : 'hover:bg-gray-100 text-gray-600 hover:text-gray-900'
              }`}
              title="Toggle Fullscreen"
            >
              {isFullscreen ? <Minimize2 className="w-5 h-5" /> : <Maximize2 className="w-5 h-5" />}
            </button>
          )}

          {/* Notifications */}
          {showNotifications && (
            <div className="relative notification-menu-container">
              <button
                onClick={handleNotificationToggle}
                className={`relative p-2 rounded-lg transition-colors ${
                  darkMode 
                    ? 'hover:bg-gray-800 text-gray-400 hover:text-white' 
                    : 'hover:bg-gray-100 text-gray-600 hover:text-gray-900'
                }`}
                title="Notifications"
              >
                <Bell className="w-5 h-5" />
                {unreadNotifications > 0 && (
                  <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold">
                    {unreadNotifications > 9 ? '9+' : unreadNotifications}
                  </span>
                )}
              </button>

              {/* Notification Dropdown */}
              {isNotificationMenuOpen && (
                <div className={`absolute right-0 mt-2 w-80 rounded-lg shadow-lg border z-50 ${
                  darkMode 
                    ? 'bg-gray-800 border-gray-700' 
                    : 'bg-white border-gray-200'
                }`}>
                  <div className="p-4 border-b border-gray-200 dark:border-gray-700">
                    <h3 className={`text-sm font-semibold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                      Notifications
                    </h3>
                  </div>
                  <div className="max-h-96 overflow-y-auto">
                    {notifications.length === 0 ? (
                      <div className="p-4 text-center">
                        <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                          No notifications
                        </p>
                      </div>
                    ) : (
                      notifications.map((notification) => (
                        <div
                          key={notification.id}
                          onClick={() => onNotificationClick?.(notification)}
                          className={`p-4 border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer ${
                            !notification.read ? 'bg-blue-50 dark:bg-blue-900/20' : ''
                          }`}
                        >
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <p className={`text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                                {notification.title}
                              </p>
                              <p className={`text-xs mt-1 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                {notification.message}
                              </p>
                              <p className={`text-xs mt-1 ${darkMode ? 'text-gray-500' : 'text-gray-400'}`}>
                                {notification.time}
                              </p>
                            </div>
                            {!notification.read && (
                              <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                            )}
                          </div>
                        </div>
                      ))
                    )}
                  </div>
                </div>
              )}
            </div>
          )}

          {/* User Menu */}
          {showUserMenu && user && (
            <div className="relative user-menu-container">
              <button
                onClick={handleUserMenuToggle}
                className={`flex items-center space-x-3 p-2 rounded-lg transition-colors ${
                  darkMode 
                    ? 'hover:bg-gray-800 text-gray-400 hover:text-white' 
                    : 'hover:bg-gray-100 text-gray-600 hover:text-gray-900'
                }`}
              >
                {/* User Avatar */}
                <div className="relative">
                  {user.avatar ? (
                    <img
                      src={user.avatar}
                      alt={user.name}
                      className="w-8 h-8 rounded-full object-cover"
                    />
                  ) : (
                    <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-medium">
                      {getUserInitials(user)}
                    </div>
                  )}
                  {user.isOnline && (
                    <div className="absolute -bottom-0.5 -right-0.5 w-3 h-3 bg-green-500 rounded-full border-2 border-white dark:border-gray-900"></div>
                  )}
                </div>

                {/* User Info - Hidden on small screens */}
                <div className="hidden md:flex items-center space-x-2">
                  <div className="text-left">
                    <p className={`text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                      {user.name}
                    </p>
                    <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                      {user.email}
                    </p>
                  </div>
                  <ChevronDown className={`w-4 h-4 transition-transform ${
                    isUserMenuOpen ? 'rotate-180' : ''
                  }`} />
                </div>
              </button>

              {/* User Dropdown */}
              {isUserMenuOpen && (
                <div className={`absolute right-0 mt-2 w-64 rounded-lg shadow-lg border z-50 ${
                  darkMode 
                    ? 'bg-gray-800 border-gray-700' 
                    : 'bg-white border-gray-200'
                }`}>
                  <div className="p-4 border-b border-gray-200 dark:border-gray-700">
                    <div className="flex items-center space-x-3">
                      {user.avatar ? (
                        <img
                          src={user.avatar}
                          alt={user.name}
                          className="w-10 h-10 rounded-full object-cover"
                        />
                      ) : (
                        <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-medium">
                          {getUserInitials(user)}
                        </div>
                      )}
                      <div className="flex-1">
                        <p className={`text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                          {user.name}
                        </p>
                        <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                          {user.email}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="py-2">
                    <Link
                      href="/profile"
                      className={`flex items-center space-x-3 px-4 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-700 ${
                        darkMode ? 'text-gray-300 hover:text-white' : 'text-gray-700 hover:text-gray-900'
                      }`}
                      onClick={() => setIsUserMenuOpen(false)}
                    >
                      <User className="w-4 h-4" />
                      <span>Profile</span>
                    </Link>
                    <Link
                      href="/settings"
                      className={`flex items-center space-x-3 px-4 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-700 ${
                        darkMode ? 'text-gray-300 hover:text-white' : 'text-gray-700 hover:text-gray-900'
                      }`}
                      onClick={() => setIsUserMenuOpen(false)}
                    >
                      <Settings className="w-4 h-4" />
                      <span>Settings</span>
                    </Link>
                    <Link
                      href="/help"
                      className={`flex items-center space-x-3 px-4 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-700 ${
                        darkMode ? 'text-gray-300 hover:text-white' : 'text-gray-700 hover:text-gray-900'
                      }`}
                      onClick={() => setIsUserMenuOpen(false)}
                    >
                      <HelpCircle className="w-4 h-4" />
                      <span>Help & Support</span>
                    </Link>
                  </div>

                  <div className="border-t border-gray-200 dark:border-gray-700">
                    <button
                      onClick={() => {
                        onLogout?.()
                        setIsUserMenuOpen(false)
                      }}
                      className={`flex items-center space-x-3 w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 ${
                        darkMode ? 'hover:text-red-400' : 'hover:text-red-700'
                      }`}
                    >
                      <LogOut className="w-4 h-4" />
                      <span>Sign Out</span>
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Command Palette Modal */}
      {isCommandPaletteOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center pt-20 z-50">
          <div className={`w-full max-w-2xl mx-4 rounded-lg shadow-2xl ${
            darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
          }`}>
            <div className="p-4 border-b border-gray-200 dark:border-gray-700">
              <form onSubmit={handleSearch} className="relative">
                <Search className={`absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 ${
                  darkMode ? 'text-gray-400' : 'text-gray-400'
                }`} />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Search for anything..."
                  className={`w-full pl-10 pr-4 py-3 text-lg rounded-lg border-0 focus:outline-none ${
                    darkMode 
                      ? 'bg-gray-800 text-white placeholder-gray-400' 
                      : 'bg-white text-gray-900 placeholder-gray-500'
                  }`}
                  autoFocus
                />
              </form>
            </div>
            <div className="p-4">
              <div className="space-y-2">
                {menuItems.slice(0, 6).map((item) => {
                  const IconComponent = iconMap[item.icon] || Home
                  return (
                    <Link
                      key={item.name}
                      href={item.href}
                      className={`flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 ${
                        darkMode ? 'text-gray-300 hover:text-white' : 'text-gray-700 hover:text-gray-900'
                      }`}
                      onClick={() => setIsCommandPaletteOpen(false)}
                    >
                      <IconComponent className="w-5 h-5" />
                      <span>Go to {item.name}</span>
                    </Link>
                  )
                })}
              </div>
            </div>
          </div>
        </div>
      )}
    </header>
  )
}