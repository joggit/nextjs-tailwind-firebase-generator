// Shopping Cart for {{businessName}}
'use client'

import { useState, useEffect } from 'react';

const CART_STORAGE_KEY = '{{businessName}}_cart';
const CART_EXPIRY_HOURS = 24;

export function useCart() {
  const [items, setItems] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadCartFromStorage();
  }, []);

  useEffect(() => {
    if (!isLoading) {
      saveCartToStorage();
    }
  }, [items, isLoading]);

  const loadCartFromStorage = () => {
    try {
      const savedCart = localStorage.getItem(CART_STORAGE_KEY);
      const cartExpiry = localStorage.getItem(CART_STORAGE_KEY + '_expiry');
      
      if (savedCart && cartExpiry) {
        const expiryTime = new Date(cartExpiry);
        const now = new Date();
        
        if (now < expiryTime) {
          setItems(JSON.parse(savedCart));
        } else {
          localStorage.removeItem(CART_STORAGE_KEY);
          localStorage.removeItem(CART_STORAGE_KEY + '_expiry');
        }
      }
    } catch (error) {
      console.error('Error loading cart from storage:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const saveCartToStorage = () => {
    try {
      localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(items));
      const expiry = new Date();
      expiry.setHours(expiry.getHours() + CART_EXPIRY_HOURS);
      localStorage.setItem(CART_STORAGE_KEY + '_expiry', expiry.toISOString());
    } catch (error) {
      console.error('Error saving cart to storage:', error);
    }
  };

  const addItem = (product, quantity = 1) => {
    setItems(prevItems => {
      const existingItem = prevItems.find(item => item.id === product.id);
      
      if (existingItem) {
        return prevItems.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + quantity }
            : item
        );
      } else {
        return [...prevItems, { ...product, quantity }];
      }
    });
  };

  const removeItem = (productId) => {
    setItems(prevItems => prevItems.filter(item => item.id !== productId));
  };

  const updateQuantity = (productId, quantity) => {
    if (quantity <= 0) {
      removeItem(productId);
      return;
    }
    
    setItems(prevItems =>
      prevItems.map(item =>
        item.id === productId ? { ...item, quantity } : item
      )
    );
  };

  const clearCart = () => {
    setItems([]);
    localStorage.removeItem(CART_STORAGE_KEY);
    localStorage.removeItem(CART_STORAGE_KEY + '_expiry');
  };

  const getItemCount = () => {
    return items.reduce((total, item) => total + item.quantity, 0);
  };

  const getSubtotal = () => {
    return items.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const getTotal = () => {
    const subtotal = getSubtotal();
    const shipping = subtotal > 50 ? 0 : 9.99;
    const tax = subtotal * 0.08;
    return subtotal + shipping + tax;
  };

  return {
    items,
    isLoading,
    addItem,
    removeItem,
    updateQuantity,
    clearCart,
    getItemCount,
    getSubtotal,
    getTotal
  };
}

export default useCart;