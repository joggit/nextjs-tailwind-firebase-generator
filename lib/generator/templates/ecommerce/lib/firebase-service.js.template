// Firebase Service for {{businessName}}
import { initializeApp, getApps } from 'firebase/app';
import { getFirestore, collection, doc, addDoc, getDocs, getDoc, updateDoc, deleteDoc } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

let app;
let db;
let auth;
let storage;

export const initializeFirebase = () => {
  if (!getApps().length) {
    app = initializeApp(firebaseConfig);
  } else {
    app = getApps()[0];
  }
  
  db = getFirestore(app);
  auth = getAuth(app);
  storage = getStorage(app);
  
  return { app, db, auth, storage };
};

// Product Service
export class ProductService {
  static async getAllProducts() {
    const { db } = initializeFirebase();
    const productsSnapshot = await getDocs(collection(db, 'products'));
    return productsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  }
  
  static async getProductById(id) {
    const { db } = initializeFirebase();
    const productDoc = await getDoc(doc(db, 'products', id));
    return productDoc.exists() ? { id: productDoc.id, ...productDoc.data() } : null;
  }
  
  static async createProduct(productData) {
    const { db } = initializeFirebase();
    return await addDoc(collection(db, 'products'), {
      ...productData,
      createdAt: new Date(),
      updatedAt: new Date()
    });
  }
}

// Order Service
export class OrderService {
  static async createOrder(orderData) {
    const { db } = initializeFirebase();
    return await addDoc(collection(db, 'orders'), {
      ...orderData,
      orderNumber: `ORD-${Date.now()}`,
      createdAt: new Date(),
      updatedAt: new Date(),
      status: 'pending'
    });
  }
  
  static async getOrderById(id) {
    const { db } = initializeFirebase();
    const orderDoc = await getDoc(doc(db, 'orders', id));
    return orderDoc.exists() ? { id: orderDoc.id, ...orderDoc.data() } : null;
  }
}

export { db, auth, storage };
export default app;