// Fixed Download API - app/api/download/route.js
import JSZip from 'jszip'

export async function POST(request) {
  try {
    console.log('📦 Starting download process...')
    
    // Get the project data from request body
    const { project } = await request.json()
    
    if (!project) {
      console.error('❌ No project data provided')
      return new Response(JSON.stringify({ 
        error: 'No project data provided' 
      }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    if (!project.files || Object.keys(project.files).length === 0) {
      console.error('❌ No project files found')
      return new Response(JSON.stringify({ 
        error: 'No project files found' 
      }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    console.log(`📁 Processing ${Object.keys(project.files).length} files...`)

    // Create ZIP file
    const zip = new JSZip()

    // Add all project files to ZIP
    Object.entries(project.files).forEach(([filePath, content]) => {
      // Normalize file path
      const normalizedPath = filePath.replace(/^\/+/, '') // Remove leading slashes
      zip.file(normalizedPath, content)
      console.log(`✅ Added: ${normalizedPath}`)
    })

    // Add project metadata
    const projectInfo = {
      name: project.name,
      template: project.template,
      generatedAt: new Date().toISOString(),
      vectorEnhanced: project.vectorEnhanced || false,
      fileCount: Object.keys(project.files).length,
      generationMetadata: project.generationMetadata || {}
    }

    zip.file('PROJECT_INFO.json', JSON.stringify(projectInfo, null, 2))

    // Add installation guide
    const installationGuide = `# ${project.name || 'Generated Project'} - Installation Guide

## 🚀 Quick Start

1. **Extract this ZIP** to your desired directory
2. **Open terminal** in the extracted folder
3. **Install dependencies:**
   \`\`\`bash
   npm install
   \`\`\`
4. **Set up environment variables:**
   \`\`\`bash
   cp .env.local.example .env.local
   \`\`\`
   Add your API keys to \`.env.local\`

5. **Start development server:**
   \`\`\`bash
   npm run dev
   \`\`\`
6. **Open your browser:** http://localhost:3000

## 📊 Project Details

- **Name:** ${project.name || 'Generated Project'}
- **Template:** ${project.template || 'modern'}
- **Generated:** ${new Date().toISOString()}
- **Files:** ${Object.keys(project.files).length}
- **Vector Enhanced:** ${project.vectorEnhanced ? '✅ Yes' : '❌ No'}

## 🛠️ Available Scripts

- \`npm run dev\` - Start development server
- \`npm run build\` - Build for production  
- \`npm run start\` - Start production server
- \`npm run lint\` - Run ESLint

## 📁 Project Structure

\`\`\`
${project.name || 'project'}/
├── app/                 # Next.js App Router
├── src/components/      # React components
├── lib/                 # Utility libraries
├── package.json
└── README.md
\`\`\`

## 🎯 Next Steps

1. **Customize Content:** Edit components and pages
2. **Update Styling:** Modify Tailwind config and CSS
3. **Add Features:** Extend with your functionality
4. **Deploy:** Use Vercel, Netlify, or your platform

${project.vectorEnhanced ? `
## 🧠 Vector Enhancement Features

This project includes AI-enhanced features:
- Smart content generation
- Industry-specific recommendations  
- Vector intelligence integration
- Contextual components

Visit \`/insights\` for AI-powered analysis.
` : ''}

## 📞 Need Help?

- Check README.md for detailed docs
- Review component files for examples
- Explore the generated code structure

---

**Generated by Vector-Enhanced Project Generator**  
*AI-powered website generation with industry intelligence*

Happy coding! 🚀`

    zip.file('INSTALLATION.md', installationGuide)

    // Add README if not already present
    if (!project.files['README.md']) {
      const readme = `# ${project.name || 'Generated Project'}

${project.config?.businessDescription || 'An AI-enhanced website generated with vector intelligence.'}

## Features

${project.vectorEnhanced ? '- 🧠 AI-enhanced content generation' : ''}
${project.vectorEnhanced ? '- 📊 Vector intelligence integration' : ''}
- ⚡ Next.js 14 with App Router
- 🎨 Tailwind CSS styling
- 📱 Fully responsive design
- 🔧 Modern development tools

## Getting Started

See INSTALLATION.md for detailed setup instructions.

\`\`\`bash
npm install
npm run dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) in your browser.

---

Generated with Vector-Enhanced Project Generator`

      zip.file('README.md', readme)
    }

    console.log('🔄 Generating ZIP file...')

    // Generate ZIP buffer with compression
    const zipBuffer = await zip.generateAsync({
      type: 'arraybuffer',
      compression: 'DEFLATE',
      compressionOptions: { level: 6 },
      streamFiles: true
    })

    // Convert ArrayBuffer to Buffer for Next.js
    const buffer = Buffer.from(zipBuffer)

    // Create safe filename
    const safeProjectName = (project.name || 'generated-project')
      .toLowerCase()
      .replace(/[^a-z0-9]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')

    const fileName = `${safeProjectName}-${Date.now()}.zip`
    const fileSizeMB = (buffer.length / (1024 * 1024)).toFixed(2)

    console.log(`✅ ZIP created: ${fileName} (${fileSizeMB}MB)`)

    // Return ZIP file
    return new Response(buffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/zip',
        'Content-Disposition': `attachment; filename="${fileName}"`,
        'Content-Length': buffer.length.toString(),
        'Cache-Control': 'no-cache',
        'X-File-Name': fileName,
        'X-File-Size': buffer.length.toString()
      }
    })

  } catch (error) {
    console.error('❌ Download error:', error)
    
    return new Response(JSON.stringify({
      error: 'Download failed',
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    })
  }
}

// Health check endpoint
export async function GET() {
  return new Response(JSON.stringify({
    status: 'healthy',
    message: 'Download API is ready',
    timestamp: new Date().toISOString(),
    features: {
      jszip: 'available',
      compression: 'enabled',
      metadata: 'included'
    }
  }), {
    status: 200,
    headers: { 'Content-Type': 'application/json' }
  })
}