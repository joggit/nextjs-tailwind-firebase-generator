// ProductCard Component Template - Generated by Website Generator
// File: components/ecommerce/ProductCard.jsx (will be generated in new projects)

'use client'

import { useState } from 'react'
import Link from 'next/link'
import Image from 'next/image'
import { useCart } from '@/hooks/useCart'
import { checkProductStock } from '@/lib/firebase-service'
import { 
  Star, 
  ShoppingCart, 
  Heart, 
  Eye, 
  Check,
  AlertCircle,
  Loader
} from 'lucide-react'

export default function ProductCard({ product, viewMode = 'grid', showQuickActions = true }) {
  const { addItem, cart } = useCart()
  const [isAdding, setIsAdding] = useState(false)
  const [justAdded, setJustAdded] = useState(false)
  const [stockError, setStockError] = useState('')
  const [isWishlisted, setIsWishlisted] = useState(false)

  const {
    id,
    name,
    description,
    price,
    originalPrice,
    image,
    rating = 0,
    reviews = 0,
    inStock = true,
    stockQuantity = 0,
    category,
    featured = false
  } = product

  // Check if item is already in cart
  const isInCart = cart.items.some(item => item.productId === id)
  const cartItem = cart.items.find(item => item.productId === id)
  const cartQuantity = cartItem ? cartItem.quantity : 0

  const handleAddToCart = async () => {
    if (!inStock) return

    setIsAdding(true)
    setStockError('')

    try {
      // Check stock availability
      const stockCheck = await checkProductStock(id, cartQuantity + 1)
      
      if (!stockCheck.available) {
        setStockError(`Only ${stockCheck.currentStock} available`)
        return
      }

      // Add to cart
      addItem(product, 1)
      setJustAdded(true)

      // Reset success state after 2 seconds
      setTimeout(() => setJustAdded(false), 2000)

    } catch (error) {
      console.error('Error adding to cart:', error)
      setStockError('Unable to add to cart')
    } finally {
      setIsAdding(false)
    }
  }

  const handleWishlistToggle = () => {
    setIsWishlisted(!isWishlisted)
    // Here you would typically save to wishlist service
  }

  const discountPercentage = originalPrice && originalPrice > price 
    ? Math.round(((originalPrice - price) / originalPrice) * 100)
    : 0

  if (viewMode === 'list') {
    return (
      <div className="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-lg transition-shadow">
        <div className="flex items-start space-x-6">
          
          {/* Product Image */}
          <Link href={`/product/${id}`} className="flex-shrink-0">
            <div className="relative w-32 h-32 bg-gray-100 rounded-lg overflow-hidden group">
              <Image
                src={image || '/placeholder-product.jpg'}
                alt={name}
                fill
                className="object-cover group-hover:scale-105 transition-transform duration-300"
              />
              {!inStock && (
                <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                  <span className="text-white text-sm font-medium">Out of Stock</span>
                </div>
              )}
              {discountPercentage > 0 && (
                <div className="absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded">
                  -{discountPercentage}%
                </div>
              )}
              {featured && (
                <div className="absolute top-2 right-2 bg-yellow-500 text-white text-xs px-2 py-1 rounded">
                  Featured
                </div>
              )}
            </div>
          </Link>
          
          {/* Product Details */}
          <div className="flex-1 min-w-0">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <Link href={`/product/${id}`}>
                  <h3 className="text-lg font-semibold text-gray-900 hover:text-blue-600 cursor-pointer line-clamp-2">
                    {name}
                  </h3>
                </Link>
                
                <p className="text-gray-600 text-sm mt-1 line-clamp-2">
                  {description}
                </p>
                
                {/* Rating */}
                <div className="flex items-center mt-2">
                  <div className="flex items-center">
                    {[...Array(5)].map((_, i) => (
                      <Star
                        key={i}
                        className={`w-4 h-4 ${
                          i < Math.floor(rating) 
                            ? 'text-yellow-400 fill-current' 
                            : 'text-gray-300'
                        }`}
                      />
                    ))}
                    <span className="ml-2 text-sm text-gray-600">
                      {rating > 0 ? `${rating} (${reviews} reviews)` : 'No reviews yet'}
                    </span>
                  </div>
                </div>

                {/* Stock Status */}
                <div className="mt-2">
                  {inStock ? (
                    <span className="text-green-600 text-sm">
                      {stockQuantity > 0 ? `${stockQuantity} in stock` : 'In stock'}
                    </span>
                  ) : (
                    <span className="text-red-600 text-sm">Out of stock</span>
                  )}
                </div>
              </div>
              
              {/* Price and Actions */}
              <div className="text-right ml-4">
                <div className="mb-3">
                  <span className="text-xl font-bold text-gray-900">
                    ${price.toFixed(2)}
                  </span>
                  {originalPrice && originalPrice > price && (
                    <span className="text-sm text-gray-500 line-through ml-2">
                      ${originalPrice.toFixed(2)}
                    </span>
                  )}
                </div>
                
                {stockError && (
                  <div className="text-red-600 text-xs mb-2 flex items-center">
                    <AlertCircle className="w-3 h-3 mr-1" />
                    {stockError}
                  </div>
                )}

                {showQuickActions && (
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={handleAddToCart}
                      disabled={!inStock || isAdding}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        !inStock 
                          ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                          : justAdded
                          ? 'bg-green-600 text-white'
                          : 'bg-blue-600 text-white hover:bg-blue-700'
                      }`}
                    >
                      {isAdding ? (
                        <Loader className="w-4 h-4 animate-spin" />
                      ) : justAdded ? (
                        <>
                          <Check className="w-4 h-4 mr-1" />
                          Added!
                        </>
                      ) : isInCart ? (
                        <>
                          <ShoppingCart className="w-4 h-4 mr-1" />
                          In Cart ({cartQuantity})
                        </>
                      ) : (
                        <>
                          <ShoppingCart className="w-4 h-4 mr-1" />
                          Add to Cart
                        </>
                      )}
                    </button>
                    
                    <button
                      onClick={handleWishlistToggle}
                      className={`p-2 rounded-lg transition-colors ${
                        isWishlisted 
                          ? 'text-red-500 hover:text-red-600' 
                          : 'text-gray-400 hover:text-red-500'
                      }`}
                    >
                      <Heart className={`w-4 h-4 ${isWishlisted ? 'fill-current' : ''}`} />
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Grid view (default)
  return (
    <div className="bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-lg transition-shadow group">
      
      {/* Product Image */}
      <Link href={`/product/${id}`} className="block relative">
        <div className="relative aspect-square bg-gray-100 overflow-hidden">
          <Image
            src={image || '/placeholder-product.jpg'}
            alt={name}
            fill
            className="object-cover group-hover:scale-105 transition-transform duration-300"
          />
          
          {/* Overlay badges */}
          {!inStock && (
            <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
              <span className="text-white text-sm font-medium">Out of Stock</span>
            </div>
          )}
          
          {discountPercentage > 0 && (
            <div className="absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded">
              -{discountPercentage}%
            </div>
          )}
          
          {featured && (
            <div className="absolute top-2 right-2 bg-yellow-500 text-white text-xs px-2 py-1 rounded">
              Featured
            </div>
          )}

          {/* Quick actions overlay */}
          {showQuickActions && (
            <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all flex items-center justify-center opacity-0 group-hover:opacity-100">
              <div className="flex space-x-2">
                <button className="bg-white text-gray-700 p-2 rounded-full hover:bg-gray-100 transition-colors">
                  <Eye className="w-4 h-4" />
                </button>
                <button
                  onClick={handleWishlistToggle}
                  className={`bg-white p-2 rounded-full hover:bg-gray-100 transition-colors ${
                    isWishlisted ? 'text-red-500' : 'text-gray-700'
                  }`}
                >
                  <Heart className={`w-4 h-4 ${isWishlisted ? 'fill-current' : ''}`} />
                </button>
              </div>
            </div>
          )}
        </div>
      </Link>
      
      {/* Product Info */}
      <div className="p-4">
        <Link href={`/product/${id}`}>
          <h3 className="font-semibold text-gray-900 hover:text-blue-600 cursor-pointer line-clamp-2 mb-2">
            {name}
          </h3>
        </Link>
        
        {/* Rating */}
        <div className="flex items-center mb-2">
          <div className="flex items-center">
            {[...Array(5)].map((_, i) => (
              <Star
                key={i}
                className={`w-3 h-3 ${
                  i < Math.floor(rating) 
                    ? 'text-yellow-400 fill-current' 
                    : 'text-gray-300'
                }`}
              />
            ))}
            <span className="ml-2 text-xs text-gray-600">
              {reviews > 0 ? `(${reviews})` : 'No reviews'}
            </span>
          </div>
        </div>
        
        {/* Price */}
        <div className="flex items-center justify-between mb-3">
          <div>
            <span className="text-lg font-bold text-gray-900">
              ${price.toFixed(2)}
            </span>
            {originalPrice && originalPrice > price && (
              <span className="text-sm text-gray-500 line-through ml-2">
                ${originalPrice.toFixed(2)}
              </span>
            )}
          </div>
          
          {/* Stock indicator */}
          {!inStock && (
            <span className="text-red-600 text-xs font-medium">
              Out of Stock
            </span>
          )}
        </div>

        {stockError && (
          <div className="text-red-600 text-xs mb-2 flex items-center">
            <AlertCircle className="w-3 h-3 mr-1" />
            {stockError}
          </div>
        )}
        
        {/* Add to Cart Button */}
        <button
          onClick={handleAddToCart}
          disabled={!inStock || isAdding}
          className={`w-full py-2 px-4 rounded-lg text-sm font-medium transition-colors ${
            !inStock 
              ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
              : justAdded
              ? 'bg-green-600 text-white'
              : 'bg-blue-600 text-white hover:bg-blue-700'
          }`}
        >
          {isAdding ? (
            <>
              <Loader className="w-4 h-4 animate-spin mr-2 inline" />
              Adding...
            </>
          ) : justAdded ? (
            <>
              <Check className="w-4 h-4 mr-2 inline" />
              Added to Cart!
            </>
          ) : !inStock ? (
            'Out of Stock'
          ) : isInCart ? (
            <>
              <ShoppingCart className="w-4 h-4 mr-2 inline" />
              In Cart ({cartQuantity})
            </>
          ) : (
            <>
              <ShoppingCart className="w-4 h-4 mr-2 inline" />
              Add to Cart
            </>
          )}
        </button>
      </div>
    </div>
  )
}