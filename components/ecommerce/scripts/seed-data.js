// Sample Data Seeder Template - Generated by Website Generator
// File: components/ecommerce/scripts/seed-data.js (will be generated in new projects)

import { initializeApp } from 'firebase/app'
import { getFirestore, collection, addDoc, writeBatch, doc } from 'firebase/firestore'

const firebaseConfig = {
  // Your Firebase config here
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
}

const app = initializeApp(firebaseConfig)
const db = getFirestore(app)

// Sample categories based on business type
const getCategories = (businessType, industry) => {
  const categoryMap = {
    'technology': [
      { name: 'Laptops & Computers', description: 'High-performance computing devices', slug: 'laptops-computers' },
      { name: 'Mobile Devices', description: 'Smartphones and tablets', slug: 'mobile-devices' },
      { name: 'Accessories', description: 'Tech accessories and peripherals', slug: 'accessories' },
      { name: 'Software', description: 'Digital products and licenses', slug: 'software' }
    ],
    'clothing': [
      { name: 'Men\'s Clothing', description: 'Clothing for men', slug: 'mens-clothing' },
      { name: 'Women\'s Clothing', description: 'Clothing for women', slug: 'womens-clothing' },
      { name: 'Accessories', description: 'Fashion accessories', slug: 'accessories' },
      { name: 'Footwear', description: 'Shoes and boots', slug: 'footwear' }
    ],
    'food': [
      { name: 'Coffee', description: 'Premium coffee beans and blends', slug: 'coffee' },
      { name: 'Tea', description: 'Fine teas from around the world', slug: 'tea' },
      { name: 'Snacks', description: 'Healthy and delicious snacks', slug: 'snacks' },
      { name: 'Equipment', description: 'Brewing and kitchen equipment', slug: 'equipment' }
    ],
    'default': [
      { name: 'Featured', description: 'Our best products', slug: 'featured' },
      { name: 'New Arrivals', description: 'Latest additions', slug: 'new-arrivals' },
      { name: 'Best Sellers', description: 'Most popular items', slug: 'best-sellers' },
      { name: 'Sale', description: 'Special offers', slug: 'sale' }
    ]
  }

  const key = industry?.toLowerCase() || businessType?.toLowerCase() || 'default'
  return categoryMap[key] || categoryMap.default
}

// Sample products based on business type and industry
const getProducts = (businessType, industry, categories) => {
  const productMap = {
    'technology': [
      {
        name: 'Professional Laptop Pro',
        description: 'High-performance laptop for professionals and creators',
        price: 1299.99,
        originalPrice: 1499.99,
        categoryName: 'Laptops & Computers',
        image: '/images/laptop-pro.jpg',
        images: ['/images/laptop-pro.jpg', '/images/laptop-pro-2.jpg'],
        inStock: true,
        stockQuantity: 25,
        rating: 4.5,
        reviews: 128,
        featured: true,
        tags: ['laptop', 'professional', 'high-performance'],
        features: ['16GB RAM', '512GB SSD', '14" 4K Display', '10-hour battery'],
        specifications: {
          'Processor': 'Intel Core i7-12700H',
          'Memory': '16GB LPDDR5',
          'Storage': '512GB NVMe SSD',
          'Display': '14" 4K OLED',
          'Graphics': 'Intel Iris Xe',
          'Weight': '2.8 lbs',
          'Battery': '10 hours',
          'Warranty': '2 years'
        }
      },
      {
        name: 'Wireless Headphones Elite',
        description: 'Premium noise-canceling wireless headphones',
        price: 299.99,
        originalPrice: 399.99,
        categoryName: 'Accessories',
        image: '/images/headphones-elite.jpg',
        inStock: true,
        stockQuantity: 45,
        rating: 4.7,
        reviews: 89,
        featured: true,
        tags: ['headphones', 'wireless', 'noise-canceling'],
        features: ['Active Noise Canceling', '30-hour battery', 'Premium comfort'],
        specifications: {
          'Driver': '40mm dynamic',
          'Frequency Response': '20Hz - 20kHz',
          'Battery Life': '30 hours',
          'Charging': 'USB-C fast charging',
          'Connectivity': 'Bluetooth 5.2',
          'Weight': '250g'
        }
      },
      {
        name: 'Smart Phone Ultra',
        description: 'Latest flagship smartphone with advanced features',
        price: 899.99,
        categoryName: 'Mobile Devices',
        image: '/images/phone-ultra.jpg',
        inStock: true,
        stockQuantity: 30,
        rating: 4.4,
        reviews: 256,
        tags: ['smartphone', 'flagship', '5G'],
        features: ['5G connectivity', 'Triple camera system', '128GB storage'],
        specifications: {
          'Display': '6.7" OLED',
          'Processor': 'A16 Bionic',
          'Storage': '128GB',
          'Camera': '48MP triple system',
          'Battery': '4000mAh',
          'OS': 'Latest mobile OS'
        }
      }
    ],
    'clothing': [
      {
        name: 'Premium Cotton T-Shirt',
        description: 'Ultra-soft premium cotton t-shirt for everyday comfort',
        price: 29.99,
        originalPrice: 39.99,
        categoryName: 'Men\'s Clothing',
        image: '/images/cotton-tshirt.jpg',
        inStock: true,
        stockQuantity: 100,
        rating: 4.3,
        reviews: 45,
        featured: true,
        tags: ['t-shirt', 'cotton', 'comfortable'],
        features: ['100% organic cotton', 'Pre-shrunk', 'Machine washable'],
        specifications: {
          'Material': '100% Organic Cotton',
          'Fit': 'Regular',
          'Care': 'Machine wash cold',
          'Sizes': 'XS-XXL',
          'Origin': 'Made in USA'
        }
      },
      {
        name: 'Designer Jeans',
        description: 'Premium denim jeans with perfect fit and style',
        price: 89.99,
        categoryName: 'Men\'s Clothing',
        image: '/images/designer-jeans.jpg',
        inStock: true,
        stockQuantity: 60,
        rating: 4.6,
        reviews: 78,
        tags: ['jeans', 'denim', 'designer'],
        features: ['Stretch denim', 'Slim fit', 'Classic styling'],
        specifications: {
          'Material': '98% Cotton, 2% Elastane',
          'Fit': 'Slim',
          'Rise': 'Mid-rise',
          'Leg Opening': '14 inches',
          'Inseam': '30", 32", 34"'
        }
      }
    ],
    'food': [
      {
        name: 'Premium Dark Roast Coffee',
        description: 'Rich, bold coffee beans with complex flavor notes',
        price: 24.99,
        categoryName: 'Coffee',
        image: '/images/dark-roast-coffee.jpg',
        inStock: true,
        stockQuantity: 75,
        rating: 4.8,
        reviews: 156,
        featured: true,
        tags: ['coffee', 'dark-roast', 'premium'],
        features: ['Single origin', 'Dark roast', '1lb bag'],
        specifications: {
          'Origin': 'Colombia',
          'Roast Level': 'Dark',
          'Weight': '1 pound',
          'Grind': 'Whole bean',
          'Tasting Notes': 'Chocolate, caramel, nuts',
          'Processing': 'Washed'
        }
      },
      {
        name: 'Earl Grey Tea Premium',
        description: 'Classic Earl Grey blend with bergamot oil',
        price: 18.99,
        categoryName: 'Tea',
        image: '/images/earl-grey-tea.jpg',
        inStock: true,
        stockQuantity: 90,
        rating: 4.5,
        reviews: 67,
        tags: ['tea', 'earl-grey', 'bergamot'],
        features: ['Ceylon black tea', 'Natural bergamot', '50 tea bags'],
        specifications: {
          'Type': 'Black tea blend',
          'Ingredients': 'Black tea, bergamot oil',
          'Caffeine': 'Medium',
          'Quantity': '50 tea bags',
          'Origin': 'Sri Lanka'
        }
      }
    ]
  }

  const key = industry?.toLowerCase() || businessType?.toLowerCase() || 'default'
  let products = productMap[key] || productMap.technology

  // Add category IDs to products
  return products.map(product => {
    const category = categories.find(cat => cat.name === product.categoryName)
    return {
      ...product,
      categoryId: category?.id || categories[0]?.id,
      active: true,
      totalSales: Math.floor(Math.random() * 100),
      views: Math.floor(Math.random() * 1000),
      createdAt: new Date(),
      updatedAt: new Date()
    }
  })
}

// Sample orders for testing
const getSampleOrders = (products) => [
  {
    orderNumber: 'ORD-001-DEMO',
    customerId: 'demo-customer-1',
    customer: {
      firstName: 'John',
      lastName: 'Doe',
      email: 'john.doe@example.com',
      phone: '+1 (555) 123-4567'
    },
    shippingAddress: {
      address: '123 Main Street',
      city: 'Anytown',
      state: 'CA',
      zipCode: '90210',
      country: 'US'
    },
    items: [
      {
        productId: products[0]?.id || 'demo-product-1',
        name: products[0]?.name || 'Demo Product',
        price: products[0]?.price || 99.99,
        quantity: 2,
        total: (products[0]?.price || 99.99) * 2
      }
    ],
    pricing: {
      subtotal: (products[0]?.price || 99.99) * 2,
      shipping: 9.99,
      tax: ((products[0]?.price || 99.99) * 2) * 0.08,
      total: ((products[0]?.price || 99.99) * 2) + 9.99 + (((products[0]?.price || 99.99) * 2) * 0.08)
    },
    status: 'pending',
    paymentStatus: 'pending',
    payment: {
      method: 'card',
      cardLast4: '4242'
    },
    createdAt: new Date(),
    updatedAt: new Date()
  }
]

// Sample customers
const getSampleCustomers = () => [
  {
    firstName: 'John',
    lastName: 'Doe',
    email: 'john.doe@example.com',
    phone: '+1 (555) 123-4567',
    newsletter: true,
    totalOrders: 1,
    totalSpent: 150.75,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    firstName: 'Jane',
    lastName: 'Smith',
    email: 'jane.smith@example.com',
    phone: '+1 (555) 987-6543',
    newsletter: false,
    totalOrders: 2,
    totalSpent: 299.50,
    createdAt: new Date(),
    updatedAt: new Date()
  }
]

// Main seeding function
async function seedDatabase(config = {}) {
  console.log('🌱 Starting database seeding...')
  
  const {
    businessName = 'Demo Store',
    businessType = 'ecommerce',
    industry = 'technology'
  } = config

  try {
    const batch = writeBatch(db)
    
    // 1. Create categories
    console.log('📂 Creating categories...')
    const categoriesData = getCategories(businessType, industry)
    const categoryIds = []
    
    for (const categoryData of categoriesData) {
      const categoryRef = doc(collection(db, 'categories'))
      const category = {
        ...categoryData,
        active: true,
        productCount: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      }
      batch.set(categoryRef, category)
      categoryIds.push({ id: categoryRef.id, ...category })
    }
    
    // Commit categories first
    await batch.commit()
    console.log(`✅ Created ${categoryIds.length} categories`)
    
    // 2. Create products
    console.log('📦 Creating products...')
    const productsData = getProducts(businessType, industry, categoryIds)
    const productIds = []
    
    for (const productData of productsData) {
      const productRef = await addDoc(collection(db, 'products'), productData)
      productIds.push({ id: productRef.id, ...productData })
    }
    console.log(`✅ Created ${productIds.length} products`)
    
    // 3. Create sample customers
    console.log('👥 Creating customers...')
    const customersData = getSampleCustomers()
    const customerIds = []
    
    for (const customerData of customersData) {
      const customerRef = await addDoc(collection(db, 'customers'), customerData)
      customerIds.push({ id: customerRef.id, ...customerData })
    }
    console.log(`✅ Created ${customerIds.length} customers`)
    
    // 4. Create sample orders
    console.log('🛒 Creating orders...')
    const ordersData = getSampleOrders(productIds)
    const orderIds = []
    
    for (const orderData of ordersData) {
      const orderRef = await addDoc(collection(db, 'orders'), orderData)
      orderIds.push({ id: orderRef.id, ...orderData })
    }
    console.log(`✅ Created ${orderIds.length} orders`)
    
    // 5. Create sample reviews
    console.log('⭐ Creating reviews...')
    const reviewsData = [
      {
        productId: productIds[0]?.id,
        customerId: customerIds[0]?.id,
        customerName: 'John Doe',
        customerEmail: 'john.doe@example.com',
        rating: 5,
        title: 'Excellent product!',
        content: 'This product exceeded my expectations. Great quality and fast shipping.',
        approved: true,
        helpful: 3,
        createdAt: new Date()
      },
      {
        productId: productIds[0]?.id,
        customerId: customerIds[1]?.id,
        customerName: 'Jane Smith',
        customerEmail: 'jane.smith@example.com',
        rating: 4,
        title: 'Good value',
        content: 'Nice product for the price. Would recommend to others.',
        approved: true,
        helpful: 1,
        createdAt: new Date()
      }
    ]
    
    for (const reviewData of reviewsData) {
      await addDoc(collection(db, 'reviews'), reviewData)
    }
    console.log(`✅ Created ${reviewsData.length} reviews`)
    
    console.log('🎉 Database seeding completed successfully!')
    console.log(`
📊 Summary:
- Categories: ${categoryIds.length}
- Products: ${productIds.length}
- Customers: ${customerIds.length}
- Orders: ${orderIds.length}
- Reviews: ${reviewsData.length}
    `)
    
    return {
      success: true,
      data: {
        categories: categoryIds.length,
        products: productIds.length,
        customers: customerIds.length,
        orders: orderIds.length,
        reviews: reviewsData.length
      }
    }
    
  } catch (error) {
    console.error('❌ Seeding failed:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

// CLI usage
if (typeof window === 'undefined') {
  // Node.js environment (CLI)
  const config = {
    businessName: process.env.BUSINESS_NAME || 'Demo Store',
    businessType: process.env.BUSINESS_TYPE || 'ecommerce',
    industry: process.env.INDUSTRY || 'technology'
  }
  
  seedDatabase(config)
    .then(result => {
      if (result.success) {
        console.log('✅ Seeding completed successfully')
        process.exit(0)
      } else {
        console.error('❌ Seeding failed:', result.error)
        process.exit(1)
      }
    })
    .catch(error => {
      console.error('❌ Seeding error:', error)
      process.exit(1)
    })
}

export default seedDatabase