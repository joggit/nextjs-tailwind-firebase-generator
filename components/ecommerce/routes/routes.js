// API Routes Template - Generated by Website Generator
// Collection of API routes for ecommerce functionality

// ==================== PRODUCTS API ====================
// File: components/ecommerce/routes/route.js
export const PRODUCTS_API_TEMPLATE = `
import { NextResponse } from 'next/server'
import { getProducts, getProductById, searchProducts } from '@/lib/firebase-service'

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url)
    const category = searchParams.get('category')
    const search = searchParams.get('search')
    const featured = searchParams.get('featured')
    
    let products
    
    if (search) {
      products = await searchProducts(search)
    } else if (featured === 'true') {
      products = await getFeaturedProducts()
    } else {
      products = await getProducts(category)
    }
    
    return NextResponse.json({
      success: true,
      data: products,
      count: products.length
    })
    
  } catch (error) {
    console.error('Products API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to fetch products' },
      { status: 500 }
    )
  }
}
`

// File: app/api/products/[id]/route.js
export const PRODUCT_DETAIL_API_TEMPLATE = `
import { NextResponse } from 'next/server'
import { getProductById } from '@/lib/firebase-service'

export async function GET(request, { params }) {
  try {
    const product = await getProductById(params.id)
    
    if (!product) {
      return NextResponse.json(
        { success: false, error: 'Product not found' },
        { status: 404 }
      )
    }
    
    return NextResponse.json({
      success: true,
      data: product
    })
    
  } catch (error) {
    console.error('Product detail API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to fetch product' },
      { status: 500 }
    )
  }
}
`

// ==================== ORDERS API ====================
// File: app/api/orders/route.js
export const ORDERS_API_TEMPLATE = `
import { NextResponse } from 'next/server'
import { createOrder, getOrdersByEmail } from '@/lib/firebase-service'

export async function POST(request) {
  try {
    const orderData = await request.json()
    
    // Validate required fields
    if (!orderData.customer || !orderData.items || !orderData.pricing) {
      return NextResponse.json(
        { success: false, error: 'Missing required order data' },
        { status: 400 }
      )
    }
    
    // Validate items array
    if (!Array.isArray(orderData.items) || orderData.items.length === 0) {
      return NextResponse.json(
        { success: false, error: 'Order must contain at least one item' },
        { status: 400 }
      )
    }
    
    // Create order
    const order = await createOrder(orderData)
    
    return NextResponse.json({
      success: true,
      data: order,
      message: 'Order created successfully'
    })
    
  } catch (error) {
    console.error('Create order API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to create order' },
      { status: 500 }
    )
  }
}

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url)
    const email = searchParams.get('email')
    
    if (!email) {
      return NextResponse.json(
        { success: false, error: 'Email parameter required' },
        { status: 400 }
      )
    }
    
    const orders = await getOrdersByEmail(email)
    
    return NextResponse.json({
      success: true,
      data: orders,
      count: orders.length
    })
    
  } catch (error) {
    console.error('Get orders API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to fetch orders' },
      { status: 500 }
    )
  }
}
`

// ==================== INVENTORY API ====================
// File: app/api/inventory/check/route.js
export const INVENTORY_CHECK_API_TEMPLATE = `
import { NextResponse } from 'next/server'
import { checkProductStock } from '@/lib/firebase-service'

export async function POST(request) {
  try {
    const { items } = await request.json()
    
    if (!Array.isArray(items)) {
      return NextResponse.json(
        { success: false, error: 'Items must be an array' },
        { status: 400 }
      )
    }
    
    const stockChecks = await Promise.all(
      items.map(async (item) => {
        const stock = await checkProductStock(item.productId, item.quantity)
        return {
          productId: item.productId,
          requestedQuantity: item.quantity,
          ...stock
        }
      })
    )
    
    const allAvailable = stockChecks.every(check => check.available)
    
    return NextResponse.json({
      success: true,
      data: {
        allAvailable,
        items: stockChecks
      }
    })
    
  } catch (error) {
    console.error('Inventory check API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to check inventory' },
      { status: 500 }
    )
  }
}
`

// ==================== REVIEWS API ====================
// File: app/api/reviews/route.js
export const REVIEWS_API_TEMPLATE = `
import { NextResponse } from 'next/server'
import { addProductReview, getProductReviews } from '@/lib/firebase-service'

export async function POST(request) {
  try {
    const reviewData = await request.json()
    
    // Validate required fields
    if (!reviewData.productId || !reviewData.customerEmail || !reviewData.rating) {
      return NextResponse.json(
        { success: false, error: 'Missing required review data' },
        { status: 400 }
      )
    }
    
    // Validate rating
    if (reviewData.rating < 1 || reviewData.rating > 5) {
      return NextResponse.json(
        { success: false, error: 'Rating must be between 1 and 5' },
        { status: 400 }
      )
    }
    
    const reviewId = await addProductReview(reviewData.productId, reviewData)
    
    return NextResponse.json({
      success: true,
      data: { id: reviewId },
      message: 'Review submitted successfully. It will be visible after approval.'
    })
    
  } catch (error) {
    console.error('Add review API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to submit review' },
      { status: 500 }
    )
  }
}

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url)
    const productId = searchParams.get('productId')
    
    if (!productId) {
      return NextResponse.json(
        { success: false, error: 'Product ID required' },
        { status: 400 }
      )
    }
    
    const reviews = await getProductReviews(productId)
    
    return NextResponse.json({
      success: true,
      data: reviews,
      count: reviews.length
    })
    
  } catch (error) {
    console.error('Get reviews API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to fetch reviews' },
      { status: 500 }
    )
  }
}
`

// ==================== SEARCH API ====================
// File: app/api/search/route.js
export const SEARCH_API_TEMPLATE = `
import { NextResponse } from 'next/server'
import { searchProducts } from '@/lib/firebase-service'

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url)
    const query = searchParams.get('q')
    
    if (!query || query.trim().length < 2) {
      return NextResponse.json(
        { success: false, error: 'Search query must be at least 2 characters' },
        { status: 400 }
      )
    }
    
    const results = await searchProducts(query.trim())
    
    return NextResponse.json({
      success: true,
      data: results,
      query: query.trim(),
      count: results.length
    })
    
  } catch (error) {
    console.error('Search API error:', error)
    return NextResponse.json(
      { success: false, error: 'Search failed' },
      { status: 500 }
    )
  }
}
`

// ==================== CATEGORIES API ====================
// File: app/api/categories/route.js
export const CATEGORIES_API_TEMPLATE = `
import { NextResponse } from 'next/server'
import { getCategories } from '@/lib/firebase-service'

export async function GET(request) {
  try {
    const categories = await getCategories()
    
    return NextResponse.json({
      success: true,
      data: categories,
      count: categories.length
    })
    
  } catch (error) {
    console.error('Categories API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to fetch categories' },
      { status: 500 }
    )
  }
}
`

// ==================== WEBHOOK API (for payment processing) ====================
// File: app/api/webhooks/payment/route.js
export const PAYMENT_WEBHOOK_API_TEMPLATE = `
import { NextResponse } from 'next/server'
import { updateOrderStatus } from '@/lib/firebase-service'

export async function POST(request) {
  try {
    const payload = await request.json()
    
    // Verify webhook signature (implementation depends on payment provider)
    // const isValid = verifyWebhookSignature(payload, request.headers)
    // if (!isValid) {
    //   return NextResponse.json({ success: false }, { status: 401 })
    // }
    
    const { orderId, status, paymentStatus } = payload
    
    if (!orderId || !status) {
      return NextResponse.json(
        { success: false, error: 'Missing required webhook data' },
        { status: 400 }
      )
    }
    
    // Update order status based on payment webhook
    await updateOrderStatus(orderId, status, paymentStatus)
    
    return NextResponse.json({
      success: true,
      message: 'Webhook processed successfully'
    })
    
  } catch (error) {
    console.error('Payment webhook error:', error)
    return NextResponse.json(
      { success: false, error: 'Webhook processing failed' },
      { status: 500 }
    )
  }
}
`

// Export all templates for the generator
export const API_ROUTES_TEMPLATES = {
  'app/api/products/route.js': PRODUCTS_API_TEMPLATE,
  'app/api/products/[id]/route.js': PRODUCT_DETAIL_API_TEMPLATE,
  'app/api/orders/route.js': ORDERS_API_TEMPLATE,
  'app/api/inventory/check/route.js': INVENTORY_CHECK_API_TEMPLATE,
  'app/api/reviews/route.js': REVIEWS_API_TEMPLATE,
  'app/api/search/route.js': SEARCH_API_TEMPLATE,
  'app/api/categories/route.js': CATEGORIES_API_TEMPLATE,
  'app/api/webhooks/payment/route.js': PAYMENT_WEBHOOK_API_TEMPLATE
}

export default API_ROUTES_TEMPLATES`